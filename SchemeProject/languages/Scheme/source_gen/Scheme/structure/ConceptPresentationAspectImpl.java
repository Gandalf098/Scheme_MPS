package Scheme.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Abs;
  private ConceptPresentation props_Expression;
  private ConceptPresentation props_Plus;
  private ConceptPresentation props_StandardProcedure;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Abs:
        if (props_Abs == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Abs = cpb.create();
        }
        return props_Abs;
      case LanguageConceptSwitch.Expression:
        if (props_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Expression = cpb.create();
        }
        return props_Expression;
      case LanguageConceptSwitch.Plus:
        if (props_Plus == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Plus = cpb.create();
        }
        return props_Plus;
      case LanguageConceptSwitch.StandardProcedure:
        if (props_StandardProcedure == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_StandardProcedure = cpb.create();
        }
        return props_StandardProcedure;
    }
    return null;
  }
}
