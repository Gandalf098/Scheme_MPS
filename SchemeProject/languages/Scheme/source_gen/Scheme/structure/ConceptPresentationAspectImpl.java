package Scheme.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Addition;
  private ConceptPresentation props_Definition;
  private ConceptPresentation props_Division;
  private ConceptPresentation props_IfStmt;
  private ConceptPresentation props_LambdaAbsVar;
  private ConceptPresentation props_LambdaAbsVarRef;
  private ConceptPresentation props_LambdaAbstraction;
  private ConceptPresentation props_LambdaApplication;
  private ConceptPresentation props_LambdaExpression;
  private ConceptPresentation props_Multiplication;
  private ConceptPresentation props_Program;
  private ConceptPresentation props_SpecialForm;
  private ConceptPresentation props_StandardProcedure;
  private ConceptPresentation props_Subtraction;
  private ConceptPresentation props_Variable;
  private ConceptPresentation props_VariableRef;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Addition:
        if (props_Addition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("(+");
          props_Addition = cpb.create();
        }
        return props_Addition;
      case LanguageConceptSwitch.Definition:
        if (props_Definition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("(define");
          props_Definition = cpb.create();
        }
        return props_Definition;
      case LanguageConceptSwitch.Division:
        if (props_Division == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("(/");
          props_Division = cpb.create();
        }
        return props_Division;
      case LanguageConceptSwitch.IfStmt:
        if (props_IfStmt == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("(if");
          props_IfStmt = cpb.create();
        }
        return props_IfStmt;
      case LanguageConceptSwitch.LambdaAbsVar:
        if (props_LambdaAbsVar == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_LambdaAbsVar = cpb.create();
        }
        return props_LambdaAbsVar;
      case LanguageConceptSwitch.LambdaAbsVarRef:
        if (props_LambdaAbsVarRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x48e98dea217697d1L, 0x48e98dea217697d2L, "variable", "", "");
          props_LambdaAbsVarRef = cpb.create();
        }
        return props_LambdaAbsVarRef;
      case LanguageConceptSwitch.LambdaAbstraction:
        if (props_LambdaAbstraction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("(lambda");
          props_LambdaAbstraction = cpb.create();
        }
        return props_LambdaAbstraction;
      case LanguageConceptSwitch.LambdaApplication:
        if (props_LambdaApplication == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("( ");
          props_LambdaApplication = cpb.create();
        }
        return props_LambdaApplication;
      case LanguageConceptSwitch.LambdaExpression:
        if (props_LambdaExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_LambdaExpression = cpb.create();
        }
        return props_LambdaExpression;
      case LanguageConceptSwitch.Multiplication:
        if (props_Multiplication == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("(*");
          props_Multiplication = cpb.create();
        }
        return props_Multiplication;
      case LanguageConceptSwitch.Program:
        if (props_Program == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Program = cpb.create();
        }
        return props_Program;
      case LanguageConceptSwitch.SpecialForm:
        if (props_SpecialForm == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_SpecialForm = cpb.create();
        }
        return props_SpecialForm;
      case LanguageConceptSwitch.StandardProcedure:
        if (props_StandardProcedure == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_StandardProcedure = cpb.create();
        }
        return props_StandardProcedure;
      case LanguageConceptSwitch.Subtraction:
        if (props_Subtraction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("(-");
          props_Subtraction = cpb.create();
        }
        return props_Subtraction;
      case LanguageConceptSwitch.Variable:
        if (props_Variable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Variable = cpb.create();
        }
        return props_Variable;
      case LanguageConceptSwitch.VariableRef:
        if (props_VariableRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x48e98dea217697d1L, 0x48e98dea217697d2L, "variable", "", "");
          props_VariableRef = cpb.create();
        }
        return props_VariableRef;
    }
    return null;
  }
}
