package Scheme.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAddition = createDescriptorForAddition();
  /*package*/ final ConceptDescriptor myConceptDefinition = createDescriptorForDefinition();
  /*package*/ final ConceptDescriptor myConceptDivision = createDescriptorForDivision();
  /*package*/ final ConceptDescriptor myConceptEmpty = createDescriptorForEmpty();
  /*package*/ final ConceptDescriptor myConceptIfStmt = createDescriptorForIfStmt();
  /*package*/ final ConceptDescriptor myConceptLambdaAbsVar = createDescriptorForLambdaAbsVar();
  /*package*/ final ConceptDescriptor myConceptLambdaAbsVarRef = createDescriptorForLambdaAbsVarRef();
  /*package*/ final ConceptDescriptor myConceptLambdaAbstraction = createDescriptorForLambdaAbstraction();
  /*package*/ final ConceptDescriptor myConceptLambdaApplication = createDescriptorForLambdaApplication();
  /*package*/ final ConceptDescriptor myConceptLambdaExpression = createDescriptorForLambdaExpression();
  /*package*/ final ConceptDescriptor myConceptMultiplication = createDescriptorForMultiplication();
  /*package*/ final ConceptDescriptor myConceptProgram = createDescriptorForProgram();
  /*package*/ final ConceptDescriptor myConceptSpecialForm = createDescriptorForSpecialForm();
  /*package*/ final ConceptDescriptor myConceptStandardProcedure = createDescriptorForStandardProcedure();
  /*package*/ final ConceptDescriptor myConceptSubtraction = createDescriptorForSubtraction();
  /*package*/ final ConceptDescriptor myConceptVariable = createDescriptorForVariable();
  /*package*/ final ConceptDescriptor myConceptVariableRef = createDescriptorForVariableRef();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAddition, myConceptDefinition, myConceptDivision, myConceptEmpty, myConceptIfStmt, myConceptLambdaAbsVar, myConceptLambdaAbsVarRef, myConceptLambdaAbstraction, myConceptLambdaApplication, myConceptLambdaExpression, myConceptMultiplication, myConceptProgram, myConceptSpecialForm, myConceptStandardProcedure, myConceptSubtraction, myConceptVariable, myConceptVariableRef);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.Addition:
        return myConceptAddition;
      case LanguageConceptSwitch.Definition:
        return myConceptDefinition;
      case LanguageConceptSwitch.Division:
        return myConceptDivision;
      case LanguageConceptSwitch.Empty:
        return myConceptEmpty;
      case LanguageConceptSwitch.IfStmt:
        return myConceptIfStmt;
      case LanguageConceptSwitch.LambdaAbsVar:
        return myConceptLambdaAbsVar;
      case LanguageConceptSwitch.LambdaAbsVarRef:
        return myConceptLambdaAbsVarRef;
      case LanguageConceptSwitch.LambdaAbstraction:
        return myConceptLambdaAbstraction;
      case LanguageConceptSwitch.LambdaApplication:
        return myConceptLambdaApplication;
      case LanguageConceptSwitch.LambdaExpression:
        return myConceptLambdaExpression;
      case LanguageConceptSwitch.Multiplication:
        return myConceptMultiplication;
      case LanguageConceptSwitch.Program:
        return myConceptProgram;
      case LanguageConceptSwitch.SpecialForm:
        return myConceptSpecialForm;
      case LanguageConceptSwitch.StandardProcedure:
        return myConceptStandardProcedure;
      case LanguageConceptSwitch.Subtraction:
        return myConceptSubtraction;
      case LanguageConceptSwitch.Variable:
        return myConceptVariable;
      case LanguageConceptSwitch.VariableRef:
        return myConceptVariableRef;
      default:
        return null;
    }
  }


  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForAddition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Scheme", "Addition", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x48e98dea2174a1c9L);
    b.class_(false, false, false);
    b.super_("Scheme.structure.StandardProcedure", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x48e98dea2174708eL);
    b.origin("r:7cd98cca-3e1a-4130-8b93-c7cf97a5b220(Scheme.structure)/5253886477027549641");
    b.version(2);
    b.alias("(+");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDefinition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Scheme", "Definition", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x48e98dea2174a1cdL);
    b.class_(false, false, false);
    b.super_("Scheme.structure.SpecialForm", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x105b29467d8fcd68L);
    b.origin("r:7cd98cca-3e1a-4130-8b93-c7cf97a5b220(Scheme.structure)/5253886477027549645");
    b.version(2);
    b.aggregate("variable", 0x48e98dea217697a7L).target(0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x48e98dea217697ceL).optional(false).ordered(true).multiple(false).origin("5253886477027678119").done();
    b.aggregate("expression", 0x48e98dea217697b0L).target(0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde89786f8eL).optional(false).ordered(true).multiple(false).origin("5253886477027678128").done();
    b.alias("(define");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDivision() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Scheme", "Division", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x48e98dea2174a1ccL);
    b.class_(false, false, false);
    b.super_("Scheme.structure.StandardProcedure", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x48e98dea2174708eL);
    b.origin("r:7cd98cca-3e1a-4130-8b93-c7cf97a5b220(Scheme.structure)/5253886477027549644");
    b.version(2);
    b.alias("(/");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmpty() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Scheme", "Empty", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x48e98dea217aaf25L);
    b.class_(false, false, false);
    b.super_("Scheme.structure.LambdaExpression", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde89786f8eL);
    b.origin("r:7cd98cca-3e1a-4130-8b93-c7cf97a5b220(Scheme.structure)/5253886477027946277");
    b.version(2);
    b.alias(" ");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIfStmt() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Scheme", "IfStmt", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x105b29467d8fcd6bL);
    b.class_(false, false, false);
    b.super_("Scheme.structure.SpecialForm", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x105b29467d8fcd68L);
    b.origin("r:7cd98cca-3e1a-4130-8b93-c7cf97a5b220(Scheme.structure)/1178581110218542443");
    b.version(2);
    b.aggregate("predicate", 0x105b29467d8fcd6cL).target(0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde89786f8eL).optional(false).ordered(true).multiple(false).origin("1178581110218542444").done();
    b.aggregate("consequent", 0x105b29467d8fcd6eL).target(0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde89786f8eL).optional(false).ordered(true).multiple(false).origin("1178581110218542446").done();
    b.aggregate("alternate", 0x105b29467d8fcd71L).target(0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde89786f8eL).optional(false).ordered(true).multiple(false).origin("1178581110218542449").done();
    b.alias("(if");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLambdaAbsVar() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Scheme", "LambdaAbsVar", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x48e98dea217697f3L);
    b.class_(false, false, false);
    b.super_("Scheme.structure.Variable", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x48e98dea217697ceL);
    b.origin("r:7cd98cca-3e1a-4130-8b93-c7cf97a5b220(Scheme.structure)/5253886477027678195");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLambdaAbsVarRef() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Scheme", "LambdaAbsVarRef", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x48e98dea217697d7L);
    b.class_(false, false, false);
    b.super_("Scheme.structure.VariableRef", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x48e98dea217697d1L);
    b.origin("r:7cd98cca-3e1a-4130-8b93-c7cf97a5b220(Scheme.structure)/5253886477027678167");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLambdaAbstraction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Scheme", "LambdaAbstraction", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x48e98dea217697d6L);
    b.class_(false, false, false);
    b.super_("Scheme.structure.LambdaExpression", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde89786f8eL);
    b.origin("r:7cd98cca-3e1a-4130-8b93-c7cf97a5b220(Scheme.structure)/5253886477027678166");
    b.version(2);
    b.aggregate("variables", 0x48e98dea217697fcL).target(0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x48e98dea217697f3L).optional(false).ordered(true).multiple(true).origin("5253886477027678204").done();
    b.aggregate("body", 0x48e98dea217697feL).target(0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde89786f8eL).optional(false).ordered(true).multiple(false).origin("5253886477027678206").done();
    b.alias("(lambda");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLambdaApplication() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Scheme", "LambdaApplication", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde897ae2dcL);
    b.class_(false, false, false);
    b.super_("Scheme.structure.LambdaExpression", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde89786f8eL);
    b.origin("r:7cd98cca-3e1a-4130-8b93-c7cf97a5b220(Scheme.structure)/4483435539906355932");
    b.version(2);
    b.aggregate("function", 0x3e385cde897ae2ddL).target(0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde89786f8eL).optional(false).ordered(true).multiple(false).origin("4483435539906355933").done();
    b.aggregate("arguments", 0x3e385cde897ae2dfL).target(0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde89786f8eL).optional(true).ordered(true).multiple(true).origin("4483435539906355935").done();
    b.alias("( ");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLambdaExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Scheme", "LambdaExpression", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde89786f8eL);
    b.class_(false, true, false);
    b.origin("r:7cd98cca-3e1a-4130-8b93-c7cf97a5b220(Scheme.structure)/4483435539906195342");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMultiplication() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Scheme", "Multiplication", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x48e98dea2174a1cbL);
    b.class_(false, false, false);
    b.super_("Scheme.structure.StandardProcedure", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x48e98dea2174708eL);
    b.origin("r:7cd98cca-3e1a-4130-8b93-c7cf97a5b220(Scheme.structure)/5253886477027549643");
    b.version(2);
    b.alias("(*");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForProgram() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Scheme", "Program", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde8977a991L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:7cd98cca-3e1a-4130-8b93-c7cf97a5b220(Scheme.structure)/4483435539906144657");
    b.version(2);
    b.aggregate("lambdaExps", 0x3e385cde897ae2b9L).target(0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde89786f8eL).optional(false).ordered(true).multiple(true).origin("4483435539906355897").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSpecialForm() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Scheme", "SpecialForm", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x105b29467d8fcd68L);
    b.class_(false, true, false);
    b.super_("Scheme.structure.LambdaExpression", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde89786f8eL);
    b.origin("r:7cd98cca-3e1a-4130-8b93-c7cf97a5b220(Scheme.structure)/1178581110218542440");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStandardProcedure() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Scheme", "StandardProcedure", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x48e98dea2174708eL);
    b.class_(false, true, false);
    b.super_("Scheme.structure.LambdaExpression", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde89786f8eL);
    b.origin("r:7cd98cca-3e1a-4130-8b93-c7cf97a5b220(Scheme.structure)/5253886477027537038");
    b.version(2);
    b.aggregate("parameters", 0x48e98dea2174a1c7L).target(0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde89786f8eL).optional(true).ordered(true).multiple(true).origin("5253886477027549639").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSubtraction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Scheme", "Subtraction", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x48e98dea2174a1caL);
    b.class_(false, false, false);
    b.super_("Scheme.structure.StandardProcedure", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x48e98dea2174708eL);
    b.origin("r:7cd98cca-3e1a-4130-8b93-c7cf97a5b220(Scheme.structure)/5253886477027549642");
    b.version(2);
    b.alias("(-");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVariable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Scheme", "Variable", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x48e98dea217697ceL);
    b.class_(false, false, false);
    b.super_("Scheme.structure.LambdaExpression", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde89786f8eL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:7cd98cca-3e1a-4130-8b93-c7cf97a5b220(Scheme.structure)/5253886477027678158");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVariableRef() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Scheme", "VariableRef", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x48e98dea217697d1L);
    b.class_(false, false, false);
    b.super_("Scheme.structure.LambdaExpression", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde89786f8eL);
    b.origin("r:7cd98cca-3e1a-4130-8b93-c7cf97a5b220(Scheme.structure)/5253886477027678161");
    b.version(2);
    b.associate("variable", 0x48e98dea217697d2L).target(0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x48e98dea217697ceL).optional(false).origin("5253886477027678162").done();
    return b.create();
  }
}
