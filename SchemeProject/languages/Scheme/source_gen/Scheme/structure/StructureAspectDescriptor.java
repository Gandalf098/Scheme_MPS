package Scheme.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAbs = createDescriptorForAbs();
  /*package*/ final ConceptDescriptor myConceptExpression = createDescriptorForExpression();
  /*package*/ final ConceptDescriptor myConceptPlus = createDescriptorForPlus();
  /*package*/ final ConceptDescriptor myConceptStandardProcedure = createDescriptorForStandardProcedure();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbs, myConceptExpression, myConceptPlus, myConceptStandardProcedure);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.Abs:
        return myConceptAbs;
      case LanguageConceptSwitch.Expression:
        return myConceptExpression;
      case LanguageConceptSwitch.Plus:
        return myConceptPlus;
      case LanguageConceptSwitch.StandardProcedure:
        return myConceptStandardProcedure;
      default:
        return null;
    }
  }


  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForAbs() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Scheme", "Abs", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde897864e3L);
    b.class_(false, false, false);
    b.super_("Scheme.structure.StandardProcedure", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde89786161L);
    b.origin("r:7cd98cca-3e1a-4130-8b93-c7cf97a5b220(Scheme.structure)/4483435539906192611");
    b.version(2);
    b.alias("abs");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Scheme", "Expression", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde8977a991L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:7cd98cca-3e1a-4130-8b93-c7cf97a5b220(Scheme.structure)/4483435539906144657");
    b.version(2);
    b.aggregate("function", 0x3e385cde89786156L).target(0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde8977a991L).optional(false).ordered(true).multiple(false).origin("4483435539906191702").done();
    b.aggregate("arguments", 0x3e385cde89786154L).target(0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde8977a991L).optional(true).ordered(true).multiple(true).origin("4483435539906191700").done();
    b.alias("expression");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPlus() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Scheme", "Plus", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde897864e4L);
    b.class_(false, false, false);
    b.super_("Scheme.structure.StandardProcedure", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde89786161L);
    b.origin("r:7cd98cca-3e1a-4130-8b93-c7cf97a5b220(Scheme.structure)/4483435539906192612");
    b.version(2);
    b.alias("+");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStandardProcedure() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Scheme", "StandardProcedure", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde89786161L);
    b.class_(false, true, false);
    b.super_("Scheme.structure.Expression", 0x153bdb2d58544e08L, 0x8d663c076d5936d6L, 0x3e385cde8977a991L);
    b.origin("r:7cd98cca-3e1a-4130-8b93-c7cf97a5b220(Scheme.structure)/4483435539906191713");
    b.version(2);
    return b.create();
  }
}
